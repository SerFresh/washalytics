import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import joblib
from statsmodels.tsa.holtwinters import ExponentialSmoothing

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
data = pd.read_csv('WashAnalytics_Machine_using.csv')
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
future_days = int(input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå: "))

# ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
y_small = data['small'].values
y_medium = data['medium'].values
y_large = data['large'].values
y_dryer = data['dryer'].values

# ‡πÉ‡∏ä‡πâ Exponential Smoothing (Holt-Winters Method)
model_small = ExponentialSmoothing(y_small, trend="add", seasonal=None).fit()
model_medium = ExponentialSmoothing(y_medium, trend="add", seasonal=None).fit()
model_large = ExponentialSmoothing(y_large, trend="add", seasonal=None).fit()
model_dryer = ExponentialSmoothing(y_dryer, trend="add", seasonal=None).fit()

# ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
y_small_pred = np.maximum(model_small.forecast(future_days), 0)
y_medium_pred = np.maximum(model_medium.forecast(future_days), 0)
y_large_pred = np.maximum(model_large.forecast(future_days), 0)
y_dryer_pred = np.maximum(model_dryer.forecast(future_days), 0)

# ‡πÄ‡∏û‡∏¥‡πà‡∏° Noise ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏ö‡πâ‡∏≤‡∏á
np.random.seed(42)
y_small_pred += np.random.normal(scale=np.std(y_small) * 1.0, size=future_days)
y_medium_pred += np.random.normal(scale=np.std(y_medium) * 1.0, size=future_days)
y_large_pred += np.random.normal(scale=np.std(y_large) * 1.0, size=future_days)
y_dryer_pred += np.random.normal(scale=np.std(y_dryer) * 1.0, size=future_days)


# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
future_dates = pd.date_range(start=data.index[-1] + pd.Timedelta(days=1), periods=future_days, freq='D')

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
df_combined = pd.DataFrame({
    'Date': pd.concat([data.index.to_series(), pd.Series(future_dates)]),
    'small': np.concatenate([y_small, y_small_pred]),
    'medium': np.concatenate([y_medium, y_medium_pred]),
    'large': np.concatenate([y_large, y_large_pred]),
    'dryer': np.concatenate([y_dryer, y_dryer_pred])
})

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Date ‡πÄ‡∏õ‡πá‡∏ô index
df_combined.set_index('Date', inplace=True)

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)
df_weekly = df_combined.resample('W').mean()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
plt.figure(figsize=(14, 8))

# ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
colors = {'small': '#B8CF7E', 'medium': '#FFD66B', 'large': '#F28B82', 'dryer': '#29B6F6'}

# ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
for column in df_weekly.columns:
    plt.plot(df_weekly.index, df_weekly[column], label=f'{column.capitalize()}', color=colors[column], linewidth=2)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
plt.axvline(x=df_weekly.index[len(df_weekly) - future_days // 7], color='gray', linestyle='--', linewidth=1.5, label='Forecast Start')

# ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏£‡∏≤‡∏ü
plt.title(f'Washing Machine and Dryer Usage Trend (Weekly Average, Forecast for {future_days} Days)', fontsize=16)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Usage Count (Weekly Average)', fontsize=14)
plt.legend(fontsize=12, bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()

# ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü
plt.show()

# ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
avg_small = round(np.mean(y_small_pred))
avg_medium = round(np.mean(y_medium_pred))
avg_large = round(np.mean(y_large_pred))
avg_dryer = round(np.mean(y_dryer_pred))

print(f"üìä Average predicted usage per day (next {future_days} days):")
print(f"- Small Washing Machine: {avg_small:.2f} times")
print(f"- Medium Washing Machine: {avg_medium:.2f} times")
print(f"- Large Washing Machine: {avg_large:.2f} times")
print(f"- Dryer: {avg_dryer:.2f} times")

# ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
recommendations = []
if avg_small < avg_medium and avg_small < avg_large and avg_small < avg_dryer:
    recommendations.append("‚ùå ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Small Washing Machines ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î")
if avg_medium < avg_small and avg_medium < avg_large and avg_medium < avg_dryer:
    recommendations.append("‚ùå ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Medium Washing Machines ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î")
if avg_large < avg_small and avg_large < avg_medium and avg_large < avg_dryer:
    recommendations.append("‚ùå ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Large Washing Machines ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î")
if avg_dryer > avg_small and avg_dryer > avg_medium and avg_dryer > avg_large:
    recommendations.append("‚úÖ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Dryers ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
print("\nüìå Recommendations:")
for rec in recommendations:
    print(f"- {rec}")

# Save model
models = {
    "small": model_small,
    "medium": model_medium,
    "large": model_large,
    "dryer": model_dryer
}
joblib.dump(models, 'Predict machine using.joblib')
