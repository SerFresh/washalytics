import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
import joblib

# โหลดข้อมูลจากไฟล์ CSV
file_path = "WashAnalytics_datafinal1.csv"  # เปลี่ยนชื่อไฟล์ตามจริง
data = pd.read_csv(file_path, parse_dates=["NewDate"], index_col="NewDate")

# ตรวจสอบข้อมูล
print(data.info())
print(data.head())

# รับค่าจำนวนวันที่ผู้ใช้ต้องการพยากรณ์
future_days = int(input("กรุณากรอกจำนวนวันที่ต้องการพยากรณ์: "))

# คำนวณค่าเฉลี่ยรายเดือนของข้อมูลเก่า
data_monthly = data['SumTotal'].resample('M').mean()

# สร้างโมเดลพยากรณ์รายได้ด้วย SARIMA
model = SARIMAX(data_monthly, order=(1,1,1), seasonal_order=(1,1,1,12))
result = model.fit()

# ทำนายรายได้ล่วงหน้าตามจำนวนวันที่ผู้ใช้กำหนด (โดยเปลี่ยนให้เป็นรายเดือน)
future_months = max(1, future_days // 30)  # แปลงเป็นจำนวนเดือน
future_dates = pd.date_range(start=data_monthly.index[-1], periods=future_months + 1, freq='M')[1:]
forecast = result.forecast(steps=future_months)

# รวมข้อมูลเก่า + ค่าพยากรณ์ เพื่อให้เส้นกราฟต่อเนื่องกัน
full_dates = data_monthly.index.append(future_dates)
full_values = data_monthly.append(pd.Series(forecast, index=future_dates))

# หาจุดแบ่งอดีต-อนาคต (จุดสุดท้ายของข้อมูลจริง)
split_date = data_monthly.index[-1]

# สร้างกราฟ
plt.figure(figsize=(12, 6))
plt.plot(full_dates, full_values, label="Actual & Forecasted Income", color="#29B6F6", linewidth=2, marker='o', linestyle='-')

# **เพิ่มเส้นแบ่งอดีต-ปัจจุบัน**
plt.axvline(x=split_date, color="orange", linestyle="--", linewidth=2, label="Forecast Start")

# ปรับแต่งกราฟให้อ่านง่ายขึ้น
plt.xlabel("Date", fontsize=12)
plt.ylabel("Income (Monthly Avg.)", fontsize=12)
plt.title(f"Laundry Shop Income Forecast (Next {future_months} Months)", fontsize=14, fontweight="bold")
plt.xticks(rotation=45)
plt.grid(True, linestyle="--", alpha=0.6)

# ซ่อนเส้นขอบบางส่วนเพื่อความสวยงาม
plt.gca().spines["top"].set_visible(False)
plt.gca().spines["right"].set_visible(False)

# แสดง legend
plt.legend(fontsize=12, loc="upper left")

# แสดงกราฟ
plt.tight_layout()
plt.show()

# แสดงค่าพยากรณ์เป็นตาราง
forecast_df = pd.DataFrame({"Date": future_dates, "Predicted_Income": forecast})
print(forecast_df)


# Save the SARIMA model using joblib
joblib.dump(result, 'Predict Income.joblib')
